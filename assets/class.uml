skinparam monochrome true
skinparam defaultFontName D2Coding
skinparam defaultFontSize 18

package helper_functions.h { 
  class control_s {
   + velocity: double
   + yawrate: double
  }

  class ground_truth {
   + x: double
   + y: double
   + theta: double
  }

  class LandmarkObs {
   + id: int
   + x: double
   + y: double
  }
  class functions {
   + dist(x1, y1, x2, y2): double
   + getError(gt_x, gt_y, gt_theta, pf_x, pf_y, pf_theta): double*
  }
}

package map.h {
  class single_landmark_s {
    + id_i: int
    + x_f: float
    + y_f: float
  }
  class Map {
    + landmark_list: vector<single_landmark_s>
  }
}

package particle_filter.h {
  class Particle {
    + id: int
    + x: double
    + y: double
    + theta: double
    + weight: double
    + associations: vector<int>
    + sense_x: vector<double>
    + sense_y: vector<double>
  }

  class ParticleFilter {
    - num_particles: int
    - is_initialized: bool
    - weights: vector<double>
    + particles: vector<Particle>
    + init(x, y, theta, std[])
    + prediction(delta_t, std_pos[], velocity, yaw_rate)
    + dataAssociation(predicted: vector<LandmarkObs>, observations: vector<LandmarkObs>)
    + updateWeights(sensor_range, std_landmark[], observations: vector<LandmarkObs>, map_landmarks: Map) 
    + resample()
    + SetAssociations(particle: Particle, associations: vector<int>, sense_x: vector<double>, sense_y: vector<double>): Particle
    + getAssociations(best: Particle): string
    + getSenseX(best: Particle): string
    + getSenseY(best: Particle): string
    + initialized() const: bool
  }
}

ParticleFilter "1" *-- "many" Particle :has
ParticleFilter ..> LandmarkObs : uses


Map *-- single_landmark_s :has
